<template>
  <div>
    <el-card>
      <div slot="header">
        <span>评论管理</span>
      </div>
      <el-table
          v-loading="loading"
          element-loading-text="拼命加载中"
          element-loading-spinner="el-icon-loading"
          element-loading-background="rgba(0, 0, 0, 0.8)"
          :data="articles"
          style="width: 100%">
        <el-table-column
            prop="title"
            label="标题"
            width="250">
        </el-table-column>
        <el-table-column
            prop="total_comment_count"
            label="总评论数"
        >
        </el-table-column>
        <el-table-column
            prop="fans_comment_count"
            label="粉丝评论数">
        </el-table-column>
        <el-table-column label="评论状态">
          <template
              slot-scope="scope"
          >
            <el-switch
                v-model="scope.row.comment_status"
                active-color="#13ce66"
                inactive-color="#ff4949"
                @change="OnState(scope.row)"
            >
            </el-switch>
          </template>
        </el-table-column>
        <el-table-column
            label="操作"
        >
          <template>
            <el-button
                type="primary"
                size="mini"
            >修改
            </el-button>
          </template>
        </el-table-column>
      </el-table>
      <div style="margin-top: 20px;display: flex;justify-content: center">
        <el-pagination
            background
            layout="prev, pager, next"
            :total="page"
            :disabled="forbidden"
            @current-change="OnChange"
        >
        </el-pagination>
      </div>
    </el-card>
  </div>
</template>

<script>
export default {
  name: 'CommentIndex',
  data () {
    return {
      // 用于存放评论列表
      articles: [],
      page: null,
      forbidden: true
    }
  },
  created () {
    this.loadArticles()
  },
  methods: {
    // 获取评论列表的方法
    loadArticles (page = 1) {
      this.forbidden = true
      // 发送请求；
      this.$axios({
        // 设置请求方式；
        method: 'GET',
        url: '/articles',
        params: {
          page,
          response_type: 'comment'
        }
      }).then(res => {
        this.articles = res.data.data.results
        this.page = res.data.data.total_count
        this.forbidden = false
        console.log('获取成功')
      }).catch(() => {
        console.log('获取失败')
      })
    },
    // 组件提供的change事件，状态改变时的回调函数
    OnState (article) {
      console.log(45)
      // 发送axios请求；
      this.$axios({
        // 设置请求方式；
        method: 'PUT',
        // 设置请求地址；
        url: '/comments/status',
        // 设置query参数；这里的id 需要手动转化一下，因为id是个对象
        params: { article_id: article.id.toString() },
        // 设置body参数；
        data: { allow_comment: article.comment_status }
      }).then(() => {
        this.$message({
          type: 'success',
          message: `${article.comment_status ? '启用' : '关闭'}成功`
        })
        // 修改成功则从新加载页面；
        this.loadArticles()
      }).catch(() => {
        this.$message.error('操作失败')
      })
    },
    // 分页组件的触发事件；
    OnChange (page) {
      /*
      * 获取当前点击的页码并作为参数传入
      */
      this.loadArticles(page)
    }
  }
}
</script>

<style scoped>
</style>
